# Highly divisable triangular number
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?

def get_nth_triangle_number(nth)
    # Get the nth triangle number i.e.
    #           nth = 1 would give 1
    #           nth = 2 would give 3
    #           nth = 3 would give 6
    #           nth = 4 would give 10
    #           nth = 5 would give 15

    # Original Code:
    # sum = 0
    # (1..nth).each do |n|
    #     sum = sum + n
    # end
    # return sum

    # Imporved Code:
    # t = n*(n+1)/2
    n = nth
    return n*(n+1)/2
end

def get_divisors(number)
    # Gets all the divisors of a given number return it in array
    #
    # Factors are paired. 1 and 24, 2 and 12, 3 and 8, 4 and 6.
    # An improvement of your algorithm could be to iterate to the square root of num
    # instead of all the way to num, and then calculate the paired factors using num / i.
    # If this is a repeated algorithm, i.e. want to find the divisors of lots of
    # numbers, generating all the primes up to root(n) with a sieve and then
    # generating the prime decomposition, and iterating over it to get all the
    # factors, will be much faster. This is because primes are logarithmically
    # distributed, so large primes tend to be far apart. So you have far fewer
    # divisions.
    result = []
    first_half = []
    (1..Math.sqrt(number)).each do |x|
        if number % x == 0
            first_half << x
        end
    end
    result = result + first_half
    first_half.each do |a|
        result << 28 / a
    end
    return result
end

def divisable_triangular_number(amount_of_divisors)
    # Get the value of the first triangle number to have a certain amount of divisors
    not_reached = true
    sum = 0
    x = 0
    n = 1
    while not_reached
        sum = sum + n
        x = get_divisors(sum).length
        if x >= amount_of_divisors
            not_reached = false
        end
        n += 1
    end
    return sum
end


n = 500
puts("The divisable triangular number with more than %s divisors is %s" %
        [n, divisable_triangular_number(n)])
puts("The (%s)nth triangle number is %s" % [n, get_nth_triangle_number(n)])
v = (get_divisors(get_nth_triangle_number(n))).length
puts("The amount of divisors for (%s)nth triangle number is %s" % [n, v])
